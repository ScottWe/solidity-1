/**
 * Defines an interactive implementation of all non-deterministic primitive
 * value calls. Data is generated by prompting the user.
 * @date 2019
 */

#include <sol_verify.h>

#include <stdio.h>

void on_entry(const char* _type, const char* _msg)
{
    printf("%s [%s]: ", _msg, _type);
}

SOL_INTEGER_INT8 nd_int8_t(const char* _msg)
{
    on_entry("int8", _msg);
    SOL_INTEGER_INT8 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%hhd", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_INT16 nd_int16_t(const char* _msg)
{
    on_entry("int16", _msg);
    SOL_INTEGER_INT16 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%hd", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_INT32 nd_int32_t(const char* _msg)
{
    on_entry("int32", _msg);
    SOL_INTEGER_INT32 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%d", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_INT64 nd_int64_t(const char* _msg)
{
    on_entry("int64", _msg);
    SOL_INTEGER_INT64 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%ld", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

#ifdef MC_USE_STDINT
__int128_t nd_stdint_int128_t(void)
{
    char input[41];
    scanf("%s", input);

    const int IS_NEG = (input[0] == '-');
    const int FIRST_DIGIT_POS = (IS_NEG ? 1 : 0);

    __int128_t retval = 0;
    for (unsigned int i = FIRST_DIGIT_POS; input[i] != 0; ++i)
    {
        retval *= 10;
        retval += (__int128_t)(input[i] - '0');
    }

    if (IS_NEG) retval = -retval;

    return retval;
}
#endif

SOL_INTEGER_INT128 nd_int128_t(const char* _msg)
{
    on_entry("int128", _msg);
    SOL_INTEGER_INT128 retval = 0;

    #ifdef MC_USE_STDINT
    retval = nd_stdint_int128_t();
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_INT256 nd_int256_t(const char* _msg)
{
    on_entry("int256", _msg);
    SOL_INTEGER_INT256 retval = 0;

    #ifdef MC_USE_STDINT
    retval = nd_stdint_int128_t();
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_UINT8 nd_uint8_t(const char* _msg)
{
    on_entry("uint8", _msg);
    SOL_INTEGER_UINT8 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%hhd", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_UINT16 nd_uint16_t(const char* _msg)
{
    on_entry("uint16", _msg);
    SOL_INTEGER_UINT16 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%hd", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_UINT32 nd_uint32_t(const char* _msg)
{
    on_entry("uint32", _msg);
    SOL_INTEGER_UINT32 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%d", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_UINT64 nd_uint64_t(const char* _msg)
{
    on_entry("uint64", _msg);
    SOL_INTEGER_UINT64 retval = 0;

    #ifdef MC_USE_STDINT
    scanf("%ld", &retval);
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

#ifdef MC_USE_STDINT
__int128_t nd_stdint_uint128_t(void)
{
    char input[40];
    scanf("%s", input);

    __int128_t retval = 0;
    for (unsigned int i = 0; input[i] != 0; ++i)
    {
        retval *= 10;
        retval += (__int128_t)(input[i] - '0');
    }

    return retval;
}
#endif

SOL_INTEGER_UINT128 nd_uint128_t(const char* _msg)
{
    on_entry("uint128", _msg);
    SOL_INTEGER_UINT128 retval = 0;

    #ifdef MC_USE_STDINT
    retval = nd_stdint_uint128_t();
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}

SOL_INTEGER_UINT256 nd_uint256_t(const char* _msg)
{
    on_entry("uint256", _msg);
    SOL_INTEGER_UINT256 retval = 0;

    #ifdef MC_USE_STDINT
    retval = nd_stdint_uint128_t();
    #elif defined MC_USE_BOOST_MP
    #error "Unimplemented."
    #endif

    return retval;
}
